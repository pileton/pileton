import discord
from discord.ext import commands
import json # For storing data like reaction roles, blacklist, etc.
import asyncio

# --- Configuration ---
TOKEN = "MTM3Nzc0NjgyMDk1MTk2NTg1OQ.GSt0BM.srL56cbtnkDD5MeOmlwe_T524LRtoCAxrdTnCo"  # Get this from the Discord Developer Portal
PREFIX = "!"
LOG_CHANNEL_ID = 1377753657017237524 # Replace with your log channel ID
TICKET_CATEGORY_ID = 1377749989303914576 # Replace with your ticket category ID
MAX_OPEN_TICKETS_PER_USER = 1

# --- Bot Intents ---
# You need to enable these in the Discord Developer Portal for your bot
intents = discord.Intents.default()
intents.members = True  # Required for some moderation commands and member events
intents.message_content = True # Required for reading message content (e.g., for commands, automod)
intents.reactions = True # Required for reaction roles

bot = commands.Bot(command_prefix=PREFIX, intents=intents)

# --- Data Files (Consider creating these files if they don't exist) ---
BLACKLIST_FILE = "blacklist.json"
REACTION_ROLES_FILE = "reaction_roles.json"
OPEN_TICKETS_FILE = "open_tickets.json" # To track user's open tickets

# --- Helper Functions for Data Handling ---
def load_data(filepath):
    try:
        with open(filepath, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {} # Return an empty dict or list depending on expected structure

def save_data(filepath, data):
    with open(filepath, 'w') as f:
        json.dump(data, f, indent=4)

# --- Event: Bot Ready ---
@bot.event
async def on_ready():
    print(f'{bot.user.name} has connected to Discord!')
    print(f'Bot ID: {bot.user.id}')
    print(f'Command Prefix: {PREFIX}')
    # Load data on startup
    global blacklist_words, reaction_roles_data, open_tickets
    blacklist_words = load_data(BLACKLIST_FILE)
    if not isinstance(blacklist_words, list): # Ensure it's a list
        blacklist_words = []
    reaction_roles_data = load_data(REACTION_ROLES_FILE)
    open_tickets = load_data(OPEN_TICKETS_FILE)
    await bot.change_presence(activity=discord.Game(name=f"{PREFIX}help"))

# --- Event: Message (for Auto-Mod) ---
@bot.event
async def on_message(message):
    if message.author == bot.user: # Ignore bot's own messages
        return

    # Auto-Moderation (Blacklisted Words)
    if any(blacklisted_word.lower() in message.content.lower() for blacklisted_word in blacklist_words):
        try:
            await message.delete()
            await message.channel.send(f"{message.author.mention}, your message contained a blacklisted word and was deleted.", delete_after=10)
            log_channel = bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                embed = discord.Embed(title="Auto-Mod Action", color=discord.Color.orange())
                embed.add_field(name="User", value=message.author.mention, inline=False)
                embed.add_field(name="Action", value="Deleted message with blacklisted word.", inline=False)
                embed.add_field(name="Original Message", value=f"```{message.content}```", inline=False)
                embed.set_footer(text=f"User ID: {message.author.id} | Channel: #{message.channel.name}")
                await log_channel.send(embed=embed)
            return # Stop processing further commands if message is deleted
        except discord.Forbidden:
            print(f"Error: Bot does not have permission to delete messages in #{message.channel.name}.")
        except Exception as e:
            print(f"Error during automod: {e}")

    await bot.process_commands(message) # Process commands after checking for blacklisted words

# --- Event: Reaction Add (for Reaction Roles and Ticket Tool) ---
@bot.event
async def on_raw_reaction_add(payload):
    if payload.user_id == bot.user.id:
        return

    guild = bot.get_guild(payload.guild_id)
    if not guild:
        return
    member = guild.get_member(payload.user_id)
    if not member:
        return

    # Reaction Roles
    rr_message_id_str = str(payload.message_id)
    if rr_message_id_str in reaction_roles_data:
        emoji_str = str(payload.emoji)
        if emoji_str in reaction_roles_data[rr_message_id_str]:
            role_id = reaction_roles_data[rr_message_id_str][emoji_str]
            role = guild.get_role(role_id)
            if role:
                try:
                    await member.add_roles(role)
                    print(f"Assigned role {role.name} to {member.name} via reaction.")
                except discord.Forbidden:
                    print(f"Error: Bot lacks permission to assign role {role.name} to {member.name}.")
                except Exception as e:
                    print(f"Error assigning role via reaction: {e}")

    # Ticket Tool Reaction (Example: üéüÔ∏è emoji on a specific message)
    # You'll need to define TICKET_CREATION_MESSAGE_ID and TICKET_CREATION_EMOJI
    # TICKET_CREATION_MESSAGE_ID = 123... # The ID of the message users react to
    # TICKET_CREATION_EMOJI = "üéüÔ∏è"
    # if payload.message_id == TICKET_CREATION_MESSAGE_ID and str(payload.emoji) == TICKET_CREATION_EMOJI:
    #     await open_ticket(member, guild)
    #     message = await bot.get_channel(payload.channel_id).fetch_message(payload.message_id)
    #     await message.remove_reaction(payload.emoji, member) # Remove reaction to prevent spam

# --- Event: Reaction Remove (for Reaction Roles) ---
@bot.event
async def on_raw_reaction_remove(payload):
    if payload.user_id == bot.user.id:
        return

    guild = bot.get_guild(payload.guild_id)
    if not guild:
        return
    member = guild.get_member(payload.user_id)
    if not member:
        return

    # Reaction Roles
    rr_message_id_str = str(payload.message_id)
    if rr_message_id_str in reaction_roles_data:
        emoji_str = str(payload.emoji)
        if emoji_str in reaction_roles_data[rr_message_id_str]:
            role_id = reaction_roles_data[rr_message_id_str][emoji_str]
            role = guild.get_role(role_id)
            if role and role in member.roles:
                try:
                    await member.remove_roles(role)
                    print(f"Removed role {role.name} from {member.name} via reaction removal.")
                except discord.Forbidden:
                    print(f"Error: Bot lacks permission to remove role {role.name} from {member.name}.")
                except Exception as e:
                    print(f"Error removing role via reaction: {e}")

# --- Moderation Commands ---
@bot.command(name='kick', help='Kicks a user from the server. Usage: !kick @user [reason]')
@commands.has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason="No reason provided."):
    try:
        await member.kick(reason=reason)
        await ctx.send(f'{member.mention} has been kicked. Reason: {reason}')
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Moderation Action: Kick", color=discord.Color.red())
            embed.add_field(name="User Kicked", value=member.mention, inline=False)
            embed.add_field(name="Moderator", value=ctx.author.mention, inline=False)
            embed.add_field(name="Reason", value=reason, inline=False)
            embed.set_footer(text=f"User ID: {member.id}")
            await log_channel.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("I don't have permission to kick that user.")
    except commands.MissingPermissions:
        await ctx.send("You don't have permission to use this command.")
    except commands.BadArgument:
        await ctx.send("Please mention a valid user to kick.")
    except Exception as e:
        await ctx.send(f"An error occurred: {e}")

@bot.command(name='ban', help='Bans a user from the server. Usage: !ban @user [reason]')
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason="No reason provided."):
    try:
        await member.ban(reason=reason)
        await ctx.send(f'{member.mention} has been banned. Reason: {reason}')
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Moderation Action: Ban", color=discord.Color.dark_red())
            embed.add_field(name="User Banned", value=member.mention, inline=False)
            embed.add_field(name="Moderator", value=ctx.author.mention, inline=False)
            embed.add_field(name="Reason", value=reason, inline=False)
            embed.set_footer(text=f"User ID: {member.id}")
            await log_channel.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("I don't have permission to ban that user.")
    except commands.MissingPermissions:
        await ctx.send("You don't have permission to use this command.")
    except commands.BadArgument:
        await ctx.send("Please mention a valid user to ban.")
    except Exception as e:
        await ctx.send(f"An error occurred: {e}")

@bot.command(name='unban', help='Unbans a user. Usage: !unban <user_id_or_name#discriminator> [reason]')
@commands.has_permissions(ban_members=True)
async def unban(ctx, *, member_identifier, reason="No reason provided by unbanner."):
    banned_users = [entry.user async for entry in ctx.guild.bans()] # Requires Python 3.8+ for async for
    
    user_to_unban = None
    try:
        # Try by ID first
        member_id = int(member_identifier)
        user_to_unban = discord.Object(id=member_id) # Can unban by ID
        # Check if the ID is actually in banned list for a more user-friendly message
        found_by_id = False
        for ban_entry in banned_users:
            if ban_entry.user.id == member_id:
                user_to_unban = ban_entry.user
                found_by_id = True
                break
        if not found_by_id:
            user_to_unban = None # Reset if ID wasn't in ban list
    except ValueError: # If not an ID, try by name#discriminator
        for ban_entry in banned_users:
            if str(ban_entry.user).lower() == member_identifier.lower():
                user_to_unban = ban_entry.user
                break
    
    if user_to_unban:
        try:
            await ctx.guild.unban(user_to_unban, reason=reason)
            await ctx.send(f'{user_to_unban.name}#{user_to_unban.discriminator} has been unbanned.')
            log_channel = bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                embed = discord.Embed(title="Moderation Action: Unban", color=discord.Color.green())
                embed.add_field(name="User Unbanned", value=f"{user_to_unban.name}#{user_to_unban.discriminator}", inline=False)
                embed.add_field(name="Moderator", value=ctx.author.mention, inline=False)
                embed.add_field(name="Reason", value=reason, inline=False)
                await log_channel.send(embed=embed)
        except discord.Forbidden:
            await ctx.send("I don't have permission to unban users.")
        except Exception as e:
            await ctx.send(f"An error occurred: {e}")
    else:
        await ctx.send(f"Could not find user '{member_identifier}' in the ban list. Provide a valid User ID or Name#Tag.")

@bot.command(name='mute', help='Mutes a user (requires a "Muted" role). Usage: !mute @user [duration (e.g., 5m, 1h, 1d)] [reason]')
@commands.has_permissions(manage_roles=True)
async def mute(ctx, member: discord.Member, duration_str: str = None, *, reason="No reason provided."):
    muted_role = discord.utils.get(ctx.guild.roles, name="Muted") # Make sure you have a role named "Muted"
    if not muted_role:
        try:
            muted_role = await ctx.guild.create_role(name="Muted", reason="For muting users")
            for channel in ctx.guild.channels: # Deny sending messages in all channels for Muted role
                await channel.set_permissions(muted_role, send_messages=False, add_reactions=False, speak=False)
            await ctx.send("Created a 'Muted' role and configured its permissions.")
        except discord.Forbidden:
            await ctx.send("I need 'Manage Roles' and 'Manage Channels' permissions to create and configure the Muted role.")
            return
        except Exception as e:
            await ctx.send(f"Error creating Muted role: {e}")
            return


    if muted_role in member.roles:
        await ctx.send(f"{member.mention} is already muted.")
        return

    try:
        await member.add_roles(muted_role, reason=reason)
        await ctx.send(f'{member.mention} has been muted. Reason: {reason}')
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Moderation Action: Mute", color=discord.Color.light_grey())
            embed.add_field(name="User Muted", value=member.mention, inline=False)
            embed.add_field(name="Moderator", value=ctx.author.mention, inline=False)
            embed.add_field(name="Reason", value=reason, inline=False)
            if duration_str:
                embed.add_field(name="Duration", value=duration_str, inline=False)
            embed.set_footer(text=f"User ID: {member.id}")
            await log_channel.send(embed=embed)

        if duration_str:
            duration_seconds = 0
            if 'd' in duration_str:
                duration_seconds += int(duration_str.split('d')[0]) * 86400
                duration_str = duration_str.split('d')[1] if len(duration_str.split('d')) > 1 else ''
            if 'h' in duration_str:
                duration_seconds += int(duration_str.split('h')[0]) * 3600
                duration_str = duration_str.split('h')[1] if len(duration_str.split('h')) > 1 else ''
            if 'm' in duration_str:
                duration_seconds += int(duration_str.split('m')[0]) * 60

            if duration_seconds > 0:
                await asyncio.sleep(duration_seconds)
                if muted_role in member.roles: # Check if still muted
                    await member.remove_roles(muted_role, reason="Mute duration expired.")
                    await ctx.send(f"{member.mention}'s mute has expired.")
                    if log_channel:
                        unmute_embed = discord.Embed(title="Moderation Action: Unmute (Auto)", color=discord.Color.green())
                        unmute_embed.add_field(name="User Unmuted", value=member.mention, inline=False)
                        unmute_embed.add_field(name="Reason", value="Mute duration expired.", inline=False)
                        await log_channel.send(embed=unmute_embed)
            else:
                await ctx.send("Invalid duration format. Use d, h, m (e.g., 1d12h30m). Mute is indefinite.")

    except discord.Forbidden:
        await ctx.send("I don't have permission to assign the Muted role.")
    except commands.MissingPermissions:
        await ctx.send("You don't have permission to use this command.")
    except commands.BadArgument:
        await ctx.send("Please mention a valid user to mute.")
    except Exception as e:
        await ctx.send(f"An error occurred during mute: {e}")


@bot.command(name='unmute', help='Unmutes a user. Usage: !unmute @user [reason]')
@commands.has_permissions(manage_roles=True)
async def unmute(ctx, member: discord.Member, *, reason="No reason provided."):
    muted_role = discord.utils.get(ctx.guild.roles, name="Muted")
    if not muted_role or muted_role not in member.roles:
        await ctx.send(f"{member.mention} is not currently muted.")
        return
    try:
        await member.remove_roles(muted_role, reason=reason)
        await ctx.send(f'{member.mention} has been unmuted. Reason: {reason}')
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Moderation Action: Unmute", color=discord.Color.green())
            embed.add_field(name="User Unmuted", value=member.mention, inline=False)
            embed.add_field(name="Moderator", value=ctx.author.mention, inline=False)
            embed.add_field(name="Reason", value=reason, inline=False)
            embed.set_footer(text=f"User ID: {member.id}")
            await log_channel.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("I don't have permission to remove the Muted role.")
    except commands.MissingPermissions:
        await ctx.send("You don't have permission to use this command.")
    except commands.BadArgument:
        await ctx.send("Please mention a valid user to unmute.")
    except Exception as e:
        await ctx.send(f"An error occurred: {e}")


@bot.command(name='clear', aliases=['purge'], help='Deletes a specified number of messages. Usage: !clear <amount>')
@commands.has_permissions(manage_messages=True)
async def clear(ctx, amount: int):
    if amount <= 0:
        await ctx.send("Please provide a positive number of messages to delete.")
        return
    if amount > 100: # Discord API limit for bulk delete is 100
        await ctx.send("You can only delete up to 100 messages at a time.")
        amount = 100
    try:
        deleted = await ctx.channel.purge(limit=amount + 1) # +1 to include the command message itself
        await ctx.send(f'Deleted {len(deleted) -1} messages.', delete_after=5) # -1 as we don't count the command
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Moderation Action: Clear Messages", color=discord.Color.blue())
            embed.add_field(name="Channel", value=ctx.channel.mention, inline=False)
            embed.add_field(name="Moderator", value=ctx.author.mention, inline=False)
            embed.add_field(name="Messages Cleared", value=len(deleted) -1, inline=False)
            await log_channel.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("I don't have permission to delete messages in this channel.")
    except commands.MissingPermissions:
        await ctx.send("You don't have permission to use this command.")
    except Exception as e:
        await ctx.send(f"An error occurred: {e}")

@clear.error
async def clear_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("Please specify the number of messages to delete. Usage: `!clear <amount>`")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("Invalid amount. Please provide a number. Usage: `!clear <amount>`")


# --- Ticket Tool ---
# Helper function to create a ticket channel
async def create_ticket_channel(guild, user):
    category = discord.utils.get(guild.categories, id=TICKET_CATEGORY_ID)
    if not category:
        await guild.system_channel.send("Ticket category not found. Please configure TICKET_CATEGORY_ID.") # Or log
        return None

    # Permissions for the ticket channel
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False), # Deny @everyone
        user: discord.PermissionOverwrite(read_messages=True, send_messages=True, attach_files=True, embed_links=True, read_message_history=True), # Allow ticket creator
        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_channels=True) # Allow bot
    }
    # Add permissions for staff/moderator roles if you have them
    # staff_role = discord.utils.get(guild.roles, name="Support Staff")
    # if staff_role:
    #     overwrites[staff_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

    try:
        # Sanitize username for channel name
        safe_username = "".join(c if c.isalnum() else "_" for c in user.name)
        channel_name = f"ticket-{safe_username}-{user.discriminator}"
        ticket_channel = await category.create_text_channel(channel_name, overwrites=overwrites)
        return ticket_channel
    except discord.Forbidden:
        await guild.system_channel.send("Bot lacks permission to create ticket channels.")
        return None
    except Exception as e:
        print(f"Error creating ticket channel: {e}")
        return None

@bot.command(name='ticket', help='Creates a new support ticket. Usage: !ticket [reason]')
async def ticket(ctx, *, reason: str = "No reason provided."):
    user_id_str = str(ctx.author.id)
    open_tickets.setdefault(user_id_str, 0) # Ensure user is in the dict

    if open_tickets[user_id_str] >= MAX_OPEN_TICKETS_PER_USER:
        await ctx.send(f"{ctx.author.mention}, you already have {open_tickets[user_id_str]} open ticket(s). Please close existing ones before opening a new one.", delete_after=10)
        try:
            await ctx.message.delete()
        except: pass
        return

    ticket_channel = await create_ticket_channel(ctx.guild, ctx.author)
    if ticket_channel:
        open_tickets[user_id_str] += 1
        save_data(OPEN_TICKETS_FILE, open_tickets)

        await ctx.send(f'{ctx.author.mention}, your ticket has been created: {ticket_channel.mention}', delete_after=10)
        try:
            await ctx.message.delete() # Delete the command message
        except discord.Forbidden:
            pass # Bot might not have permission to delete the command message in some setups

        embed = discord.Embed(title=f"New Ticket by {ctx.author.display_name}", description=f"**Reason:**\n{reason}", color=discord.Color.blue())
        embed.set_thumbnail(url=ctx.author.display_avatar.url)
        embed.add_field(name="Ticket Owner", value=ctx.author.mention, inline=True)
        embed.add_field(name="Channel", value=ticket_channel.mention, inline=True)
        embed.set_footer(text=f"User ID: {ctx.author.id} | To close this ticket, type !closeticket")
        
        ticket_msg = await ticket_channel.send(content=f"{ctx.author.mention}, please describe your issue in detail. Support staff will be with you shortly.", embed=embed)
        await ticket_msg.pin() # Pin the initial ticket message

        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            log_embed = discord.Embed(title="Ticket Created", color=discord.Color.green())
            log_embed.add_field(name="Creator", value=ctx.author.mention, inline=False)
            log_embed.add_field(name="Ticket Channel", value=ticket_channel.mention, inline=False)
            log_embed.add_field(name="Reason", value=reason, inline=False)
            await log_channel.send(embed=log_embed)
    else:
        await ctx.send(f'{ctx.author.mention}, there was an error creating your ticket. Please contact an administrator.', delete_after=10)
        try:
            await ctx.message.delete()
        except: pass


@bot.command(name='closeticket', help='Closes the current ticket channel. Can only be used in a ticket channel.')
async def closeticket(ctx, *, reason: str = "Ticket closed by staff/user."):
    category = discord.utils.get(ctx.guild.categories, id=TICKET_CATEGORY_ID)
    if not category or ctx.channel.category != category or not ctx.channel.name.startswith('ticket-'):
        await ctx.send("This command can only be used in a ticket channel.", delete_after=10)
        return

    # Attempt to find the original ticket creator from channel permissions or pinned message
    ticket_creator_id = None
    try:
        # Try to get from channel name (if you include user ID in channel name)
        # Or from a pinned message containing the user ID.
        # For this example, we'll try to find who has explicit send_message perms other than bot/staff
        for target, overwrite in ctx.channel.overwrites.items():
            if isinstance(target, discord.Member) and target != ctx.guild.me:
                if overwrite.send_messages: # Basic assumption
                    ticket_creator_id = str(target.id)
                    break
        if not ticket_creator_id: # Fallback: check pinned messages if you store creator ID there
             pins = await ctx.channel.pins()
             for pin in pins:
                 if pin.embeds and pin.embeds[0].footer and "User ID:" in pin.embeds[0].footer.text:
                     try:
                        ticket_creator_id = str(pin.embeds[0].footer.text.split("User ID: ")[1].split(" |")[0])
                        break
                     except: pass
    except Exception as e:
        print(f"Error identifying ticket creator for count decrement: {e}")


    await ctx.send(f'Closing this ticket in 10 seconds... Reason: {reason}')
    await asyncio.sleep(10)

    try:
        await ctx.channel.delete(reason=f"Ticket closed by {ctx.author.name}. Reason: {reason}")

        if ticket_creator_id and ticket_creator_id in open_tickets:
            open_tickets[ticket_creator_id] = max(0, open_tickets[ticket_creator_id] - 1) # Decrement, ensure not negative
            save_data(OPEN_TICKETS_FILE, open_tickets)

        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Ticket Closed", color=discord.Color.orange())
            embed.add_field(name="Closed By", value=ctx.author.mention, inline=False)
            embed.add_field(name="Ticket Channel Name", value=ctx.channel.name, inline=False) # Name before deletion
            embed.add_field(name="Reason", value=reason, inline=False)
            if ticket_creator_id:
                user = await bot.fetch_user(int(ticket_creator_id))
                embed.add_field(name="Original Ticket Creator", value=user.mention if user else f"ID: {ticket_creator_id}", inline=False)
            await log_channel.send(embed=embed)

    except discord.Forbidden:
        await ctx.send("I don't have permission to delete this channel.")
    except Exception as e:
        await ctx.send(f"An error occurred while closing the ticket: {e}")
        print(f"Error closing ticket: {e}")


# --- Reaction Roles Setup ---
@bot.command(name='setreactionrole', aliases=['srr'], help='Sets up a reaction role. Usage: !srr <message_id> <emoji> @role')
@commands.has_permissions(manage_roles=True)
async def set_reaction_role(ctx, message_id: int, emoji: str, role: discord.Role):
    try:
        msg = await ctx.channel.fetch_message(message_id)
    except discord.NotFound:
        await ctx.send("Message not found. Make sure the message ID is correct and from this channel.")
        return
    except discord.Forbidden:
        await ctx.send("I don't have permission to read message history in this channel.")
        return
    except Exception as e:
        await ctx.send(f"Error fetching message: {e}")
        return

    message_id_str = str(message_id)
    reaction_roles_data.setdefault(message_id_str, {})
    reaction_roles_data[message_id_str][emoji] = role.id
    save_data(REACTION_ROLES_FILE, reaction_roles_data)

    try:
        await msg.add_reaction(emoji)
        await ctx.send(f"Reaction role set! Users reacting with {emoji} on message {message_id} will get the {role.name} role.")
    except discord.HTTPException:
        await ctx.send(f"Failed to add reaction. Is '{emoji}' a valid emoji I can use, or do I have 'Add Reactions' permission?")
    except Exception as e:
        await ctx.send(f"Error setting reaction role: {e}")

@bot.command(name='removereactionrole', aliases=['rrr'], help='Removes a reaction role. Usage: !rrr <message_id> <emoji>')
@commands.has_permissions(manage_roles=True)
async def remove_reaction_role(ctx, message_id: int, emoji: str):
    message_id_str = str(message_id)
    if message_id_str in reaction_roles_data and emoji in reaction_roles_data[message_id_str]:
        del reaction_roles_data[message_id_str][emoji]
        if not reaction_roles_data[message_id_str]: # If no more emojis for this message
            del reaction_roles_data[message_id_str]
        save_data(REACTION_ROLES_FILE, reaction_roles_data)
        await ctx.send(f"Reaction role for emoji {emoji} on message {message_id} has been removed.")
        # You might want to remove the bot's reaction from the message too
        try:
            msg = await ctx.channel.fetch_message(message_id)
            await msg.remove_reaction(emoji, bot.user)
        except Exception:
            pass # Ignore if reaction removal fails
    else:
        await ctx.send("That reaction role was not found.")


# --- Role and Channel Creation ---
@bot.command(name='createrole', help='Creates a new role. Usage: !createrole <role_name> [hex_color (e.g., #FF0000)]')
@commands.has_permissions(manage_roles=True)
async def create_role_cmd(ctx, role_name: str, hex_color: str = None):
    color = discord.Color.default()
    if hex_color:
        try:
            color = discord.Color(int(hex_color.lstrip('#'), 16))
        except ValueError:
            await ctx.send("Invalid hex color format. Please use format like #FF0000. Using default color.")

    try:
        new_role = await ctx.guild.create_role(name=role_name, color=color, reason=f"Role created by {ctx.author.name}")
        await ctx.send(f"Role '{new_role.name}' with color {new_role.color} created successfully!")
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Role Created", color=color if color != discord.Color.default() else discord.Color.blue())
            embed.add_field(name="Role Name", value=new_role.name, inline=False)
            embed.add_field(name="Role ID", value=new_role.id, inline=False)
            embed.add_field(name="Created By", value=ctx.author.mention, inline=False)
            await log_channel.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("I don't have permission to create roles.")
    except Exception as e:
        await ctx.send(f"An error occurred: {e}")

@bot.command(name='createchannel', help='Creates a new text channel. Usage: !createchannel <channel_name> [category_id]')
@commands.has_permissions(manage_channels=True)
async def create_channel_cmd(ctx, channel_name: str, category_id: int = None):
    category = None
    if category_id:
        category = discord.utils.get(ctx.guild.categories, id=category_id)
        if not category:
            await ctx.send(f"Category with ID {category_id} not found. Creating channel without a category.")

    try:
        new_channel = await ctx.guild.create_text_channel(name=channel_name, category=category, reason=f"Channel created by {ctx.author.name}")
        await ctx.send(f"Text channel '{new_channel.name}' created successfully in category '{category.name if category else 'None'}'!")
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Channel Created", color=discord.Color.blue())
            embed.add_field(name="Channel Name", value=new_channel.mention, inline=False)
            embed.add_field(name="Channel ID", value=new_channel.id, inline=False)
            embed.add_field(name="Category", value=category.name if category else "None", inline=False)
            embed.add_field(name="Created By", value=ctx.author.mention, inline=False)
            await log_channel.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("I don't have permission to create channels.")
    except Exception as e:
        await ctx.send(f"An error occurred: {e}")


# --- Auto-Mod: Blacklist Word Management ---
@bot.command(name='addblacklist', aliases=['abw'], help='Adds a word to the blacklist. Usage: !addblacklist <word>')
@commands.has_permissions(manage_guild=True) # Or a custom permission
async def add_blacklist_word(ctx, *, word: str):
    word_lower = word.lower()
    if word_lower not in blacklist_words:
        blacklist_words.append(word_lower)
        save_data(BLACKLIST_FILE, blacklist_words)
        await ctx.send(f"Word '{word}' added to the blacklist.")
    else:
        await ctx.send(f"Word '{word}' is already in the blacklist.")

@bot.command(name='removeblacklist', aliases=['rbw'], help='Removes a word from the blacklist. Usage: !removeblacklist <word>')
@commands.has_permissions(manage_guild=True)
async def remove_blacklist_word(ctx, *, word: str):
    word_lower = word.lower()
    if word_lower in blacklist_words:
        blacklist_words.remove(word_lower)
        save_data(BLACKLIST_FILE, blacklist_words)
        await ctx.send(f"Word '{word}' removed from the blacklist.")
    else:
        await ctx.send(f"Word '{word}' is not in the blacklist.")

@bot.command(name='showblacklist', aliases=['sbw'], help='Shows all blacklisted words.')
@commands.has_permissions(manage_guild=True)
async def show_blacklist(ctx):
    if blacklist_words:
        # Paginate if the list is very long
        display_list = "\n".join([f"- `{word}`" for word in blacklist_words])
        if len(display_list) > 1900 : # Discord message limit is 2000
             # Simple pagination for Pydroid (advanced pagination uses Views which might be more complex to set up initially)
            chunks = [blacklist_words[i:i + 50] for i in range(0, len(blacklist_words), 50)] # 50 words per chunk
            for i, chunk in enumerate(chunks):
                chunk_display = "\n".join([f"- `{word}`" for word in chunk])
                embed = discord.Embed(title=f"Blacklisted Words (Page {i+1}/{len(chunks)})", description=chunk_display, color=discord.Color.orange())
                await ctx.send(embed=embed)
        else:
            embed = discord.Embed(title="Blacklisted Words", description=display_list, color=discord.Color.orange())
            await ctx.send(embed=embed)
    else:
        await ctx.send("The blacklist is currently empty.")


# --- Lockdown Command ---
@bot.command(name='lockdown', help='Locks the current channel (prevents @everyone from sending messages). Usage: !lockdown [reason]')
@commands.has_permissions(manage_channels=True)
async def lockdown(ctx, *, reason: str = "Channel locked by moderator."):
    channel = ctx.channel
    everyone_role = ctx.guild.default_role # Gets the @everyone role

    current_perms = channel.overwrites_for(everyone_role)
    if not current_perms.send_messages and current_perms.send_messages is not None: # Already locked
        await ctx.send(f"{channel.mention} is already locked.")
        return

    try:
        await channel.set_permissions(everyone_role, send_messages=False, reason=reason)
        await ctx.send(f"üîí {channel.mention} has been locked. Reason: {reason}")
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Channel Locked", color=discord.Color.dark_orange())
            embed.add_field(name="Channel", value=channel.mention, inline=False)
            embed.add_field(name="Moderator", value=ctx.author.mention, inline=False)
            embed.add_field(name="Reason", value=reason, inline=False)
            await log_channel.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("I don't have permission to manage this channel's permissions.")
    except Exception as e:
        await ctx.send(f"An error occurred: {e}")


@bot.command(name='unlock', help='Unlocks the current channel. Usage: !unlock [reason]')
@commands.has_permissions(manage_channels=True)
async def unlock(ctx, *, reason: str = "Channel unlocked by moderator."):
    channel = ctx.channel
    everyone_role = ctx.guild.default_role

    current_perms = channel.overwrites_for(everyone_role)
    if current_perms.send_messages or current_perms.send_messages is None : # Already unlocked or perms not explicitly set to False
        await ctx.send(f"{channel.mention} is not currently locked to @everyone (or permissions are inherited).")
        return

    try:
        # Setting to None will make it inherit from category or server default perms
        # Set to True if you want to explicitly allow regardless of category
        await channel.set_permissions(everyone_role, send_messages=None, reason=reason)
        await ctx.send(f"üîì {channel.mention} has been unlocked. Reason: {reason}")
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(title="Channel Unlocked", color=discord.Color.dark_green())
            embed.add_field(name="Channel", value=channel.mention, inline=False)
            embed.add_field(name="Moderator", value=ctx.author.mention, inline=False)
            embed.add_field(name="Reason", value=reason, inline=False)
            await log_channel.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("I don't have permission to manage this channel's permissions.")
    except Exception as e:
        await ctx.send(f"An error occurred: {e}")

# --- Error Handling for Commands ---
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("Invalid command. Use `!help` to see available commands.", delete_after=10)
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send(f"Sorry {ctx.author.mention}, you don't have permission to use that command!", delete_after=10)
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"You're missing a required argument for that command. Check `!help {ctx.command.name}`.", delete_after=10)
    elif isinstance(error, commands.BadArgument):
        await ctx.send(f"One of the arguments you provided was invalid. Check `!help {ctx.command.name}`.", delete_after=10)
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"This command is on cooldown. Try again in {error.retry_after:.2f} seconds.", delete_after=10)
    elif isinstance(error, discord.Forbidden):
        await ctx.send("I don't have the necessary permissions to perform that action. Please check my role permissions.", delete_after=10)
    else:
        # Log other errors to console or a log file for debugging
        print(f'Unhandled error in command {ctx.command}: {error}')
        # await ctx.send("An unexpected error occurred. The developers have been notified (not really, but they should check the logs).", delete_after=10) # User-friendly message
    try:
        await ctx.message.delete(delay=10) # Try to delete the user's command message after showing error
    except:
        pass


# --- Keep Alive (for some environments, Pydroid 3 might not strictly need this if run in foreground) ---
# If you find your bot disconnecting on Pydroid 3 after a while even with screen on,
# you might explore a simple keep-alive if Pydroid 3 suspends network activity.
# However, typically, keeping Pydroid 3 open and the device awake is the primary method.
# For Replit hosting (not Pydroid), a web server is common for keep-alive.

# --- Run the Bot ---
if __name__ == "__main__":
    if TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("ERROR: Please replace 'YOUR_BOT_TOKEN_HERE' with your actual bot token in the script.")
    else:
        try:
            bot.run(TOKEN)
        except discord.LoginFailure:
            print("Login Failure: Make sure your bot token is correct and you have enabled the necessary intents in the Discord Developer Portal.")
        except Exception as e:
            print(f"Error running bot: {e}")

